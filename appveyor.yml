version: '{branch}.{build}'
environment:
  matrix:
    - PYTHON: "2.7"
      PYTHON_INSTALL: "2.7.13"

platform:
  #- x86
  - x64

install:
  # Set the home for the Python version
  - set "PYTHON_HOME=C:\\Python%PYTHON:.=%"
  - if [%PLATFORM%]==[x64] set "PYTHON_HOME=%PYTHON_HOME%-x64"

  # Print environment information
  - "echo Environment: Python %PYTHON% / Platform %PLATFORM% / %PYTHON_HOME%"

  # Install and configure Python in the path to use the needed version
  - if not exist "%PYTHON_HOME%" ( set "NEEDINSTALL=True" ) else ( set "NEEDINSTALL=False" )
  - "echo Does Python %PYTHON% (%PLATFORM%) need to be installed? %NEEDINSTALL%"
  - if [%NEEDINSTALL%]==[True] (
        if [%PLATFORM%]==[x64] (
            set "PYTHON_DL=python-%PYTHON_INSTALL%.amd64.msi"
        ) else (
            set "PYTHON_DL=python-%PYTHON_INSTALL%.msi"
        )
    )
  - if [%NEEDINSTALL%]==[True] (
        echo Downloading https://www.python.org/ftp/python/%PYTHON_INSTALL%/%PYTHON_DL% &
        appveyor DownloadFile https://www.python.org/ftp/python/%PYTHON_INSTALL%/%PYTHON_DL% &
        echo Installing %PYTHON_DL% in %PYTHON_HOME% &
        msiexec /i %PYTHON_DL% /qn TARGETDIR=%PYTHON_HOME%
    )
  - set "PATH=%PYTHON_HOME%;%PYTHON_HOME%\\Scripts;%PATH%"
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Install pip
  - appveyor DownloadFile https://bootstrap.pypa.io/get-pip.py
  - "python get-pip.py"
  - "pip --version"

  # Install dependencies
  - "pip install nose"
  - if [%PYTHON%]==[2.6] pip install unittest2
  - "pip install fuzzywuzzy"
  - "pip install python-levenshtein"
  - "pip install imdbpie"
  - "pip install pyinstaller"

build_script:
  - "%CMD_IN_ENV% pyinstaller --onefile --noconsole TraktForVLC.py"
  - "%CMD_IN_ENV% python -c \"import os; from pprint import pprint; pprint(sorted([os.path.join(r, fi) for (r, d, f) in os.walk('.') if '.git' not in r for fi in f]))\""
skip_tags: true

artifacts:
  - path: dist/
    name: $(APPVEYOR_PROJECT_NAME)-$(APPVEYOR_REPO_BRANCH)-$(PLATFORM)
    type: zip

deploy:
  release: $(APPVEYOR_REPO_BRANCH)-release
  description: 'Release description'
  provider: GitHub
  auth_token:
    secure: p4SqkPeYal/Zfew4DoeZjV716Y2SlUqTpEtFCGhUkFjImW1zEuBzQ2XchsWHZLjS # your encrypted token from GitHub
  artifact: /dist\/*/            # upload all NuGet packages to release assets
  draft: false
  prerelease: false
  on:
    branch: testappveyor                 # release from master branch only
    #appveyor_repo_tag: true        # deploy on tag push only

test: off
